"========================= normal settings ==================================
" makes vim valid
set nocompatible

" set the timeout for keycodes to be 100ms this makes sure escape is quick
" now also setting the timeout for user mappings to be 3s
set ttimeout timeoutlen=3000 ttimeoutlen=50
set timeout

" this will make vim automatically read a file again if it detects a change
" from elsewhere
set autoread

" turns on status bar all the time, and shows where you are in file
set laststatus=2
set ruler

" makes backspace work like you would expect
set backspace=indent,eol,start

" turns off backup files
set nobackup

" display autocompletion menu
set wildmenu

" make searching juicy
set incsearch

" take indent hints from files
set smartindent
" show the command in the bottom right corner
set showcmd

" load all the plugins
filetype plugin indent on

" make files pretty
syntax on

" set what invisibles look like
set listchars=tab:>\ ,eol:$,space:_

" shows line number on current line and relative line numbers on all others
set number relativenumber

" makes searching smarter, if you don't use upcase, then your search case is
" ignored
set ignorecase
set smartcase

" this makes vim ask to confirm edits rather than just throwing error, and it
" autowrites on jumps between buffers, tags, suspension
set confirm
set autowrite

" allows for persistent undo
set undofile
set undodir=~/.config/vim/undo//

" sets where viminfo is and swapfiles go
set viminfo+=n~/.config/vim/viminfo
set directory=~/.config/vim/swp//

" autocomplete menu now opens for one result, no popup
set completeopt=menuone

" search through subdirectories
set path+=**

" cursor won't get too close to the bottom
set scrolloff=3

" this sets the length of indentation (shiftwidth) to 4, and sets the length
" of a tab character (tabstop) to 4, and sets the 'experience' of a tab
" character (ie the tab and backspace keys behavior), and expands all
" tabs to spaces, and finally makes indenting take hints from filetype
set shiftwidth=4
set tabstop=4 softtabstop=4
set expandtab

augroup vimcursor
    autocmd!
    autocmd VimEnter * silent exec "! echo -ne '\e[1 q'"
    autocmd VimLeave * silent exec "! echo -ne '\e[5 q'"
augroup END

" make the 81st column stand out
augroup highlighting
    autocmd!
    autocmd Colorscheme * highlight BackgroundWarning ctermbg=9 guibg=#be5046
    autocmd Colorscheme * match BackgroundWarning /\%81v/
augroup END

" makes colors look nice (get full RGB spectrum, not 256 random colors)
if has('termguicolors')
    set termguicolors
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif

" delete trailing whitespace on save
augroup trailing
    autocmd!
    autocmd BufWrite * %s/\s\+$//e
augroup END

"======================== remaps ============================================
let mapleader =" "
" yeet text with J and K in visual mode
vnoremap <S-j> :m '>+1<CR>gv=gv
vnoremap <S-k> :m '<-2<CR>gv=gv

" make window navigation make sense
nnoremap <Leader>h :wincmd h<CR>
nnoremap <Leader>k :wincmd k<CR>
nnoremap <Leader>l :wincmd l<CR>
nnoremap <Leader>h :wincmd h<CR>
nnoremap <expr> <Leader>s (&hls ? ':set nohls<CR>' : ':set hls<CR>')
nnoremap ]q :cnext<CR>
nnoremap [q :cprev<CR>
nnoremap ]b :bnext<CR>
nnoremap [b :bprev<CR>
nnoremap <silent> <Leader>r :call system('/usr/local/bin/ctags -R')<CR>
nnoremap <Leader>d :call myfunctions#DiffSaved()<CR>

set runtimepath=~/.config/vim,$VIMRUNTIME,~/.config/vim/after
set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case

call plug#begin('~/.config/vim/plugged')
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'mbbill/undotree'
Plug 'joshdick/onedark.vim'
Plug 'sheerun/vim-polyglot'
Plug 'itchyny/lightline.vim'
Plug 'ap/vim-css-color'
Plug 'machakann/vim-highlightedyank'
Plug 'tpope/vim-repeat'
" Plug 'vim-latex/vim-latex'

" Text objects
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround' " {verb}s{char}[replacement] ys{text object}{char}
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-indent' "ii ai iI aI
Plug 'kana/vim-textobj-entire' "ae and ie, ie excludes extra whitespace
call plug#end()

nnoremap <Leader>f :Rg<CR>
nnoremap <Leader>t :Files<CR>
nnoremap <Leader>b :Buffers<CR>
nnoremap <Leader>u :UndotreeToggle<CR>

set noshowmode
let g:lightline = { 'colorscheme': 'onedark', }
colorscheme onedark
hi! Normal ctermbg=NONE guibg=NONE
hi! NonText ctermbg=NONE guibg=NONE
